
Final Auto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000bc2  00000c56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000a0  008000a0  00000c96  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ac2  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2f  00000000  00000000  00002946  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f02  00000000  00000000  00003575  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00004478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070c  00000000  00000000  00004740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e32  00000000  00000000  00004e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005c7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3b       	cpi	r26, 0xB4	; 180
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9d 02 	call	0x53a	; 0x53a <main>
  8a:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DC_MOTOR_init>:
//H-A2 =>C4
//H-A3 =>C5
//H-A4 =>C6

void DC_MOTOR_init(){
	SET_BIT(DDRC,3); //H-A1
  92:	84 b3       	in	r24, 0x14	; 20
  94:	88 60       	ori	r24, 0x08	; 8
  96:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,4); //H-A2
  98:	84 b3       	in	r24, 0x14	; 20
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	84 bb       	out	0x14, r24	; 20

	SET_BIT(DDRC,5); //H-A3
  9e:	84 b3       	in	r24, 0x14	; 20
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,6); //H-A4
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	84 bb       	out	0x14, r24	; 20

	SET_BIT(DDRB,5); //H-enable 1
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,6); //H-enable 2
  b0:	87 b3       	in	r24, 0x17	; 23
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	87 bb       	out	0x17, r24	; 23
  b6:	08 95       	ret

000000b8 <DC_MOTOR_forward>:
	
}
void DC_MOTOR_forward(){
	//motor A
	SET_BIT(PORTC,3); //H-A1
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	85 bb       	out	0x15, r24	; 21
	CLEAR_BIT(PORTC,4); //H-A2
  be:	85 b3       	in	r24, 0x15	; 21
  c0:	8f 7e       	andi	r24, 0xEF	; 239
  c2:	85 bb       	out	0x15, r24	; 21
	//motor B
	SET_BIT(PORTC,5); //H-A3
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	85 bb       	out	0x15, r24	; 21
	CLEAR_BIT(PORTC,6); //H-A4
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	8f 7b       	andi	r24, 0xBF	; 191
  ce:	85 bb       	out	0x15, r24	; 21
	//enable Ports
	SET_BIT(PORTB,5);
  d0:	88 b3       	in	r24, 0x18	; 24
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,6);
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	88 bb       	out	0x18, r24	; 24
  dc:	08 95       	ret

000000de <DC_MOTOR_right>:

	
}
void DC_MOTOR_right(){
	//motor A
	SET_BIT(PORTC,3); //H-A1
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	85 bb       	out	0x15, r24	; 21
	CLEAR_BIT(PORTC,4); //H-A2
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	8f 7e       	andi	r24, 0xEF	; 239
  e8:	85 bb       	out	0x15, r24	; 21
	//motor B
	CLEAR_BIT(PORTC,5); //H-A3
  ea:	85 b3       	in	r24, 0x15	; 21
  ec:	8f 7d       	andi	r24, 0xDF	; 223
  ee:	85 bb       	out	0x15, r24	; 21
	CLEAR_BIT(PORTC,6); //H-A4
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	85 bb       	out	0x15, r24	; 21
	//enable Ports
	SET_BIT(PORTB,5);
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	88 bb       	out	0x18, r24	; 24
	CLEAR_BIT(PORTB,6);
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	8f 7b       	andi	r24, 0xBF	; 191
 100:	88 bb       	out	0x18, r24	; 24
 102:	08 95       	ret

00000104 <DC_MOTOR_left>:
	
}
void DC_MOTOR_left(){
	//motor A
	CLEAR_BIT(PORTC,3); //H-A1
 104:	85 b3       	in	r24, 0x15	; 21
 106:	87 7f       	andi	r24, 0xF7	; 247
 108:	85 bb       	out	0x15, r24	; 21
	CLEAR_BIT(PORTC,4);//H-A2
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	85 bb       	out	0x15, r24	; 21
	//motor B
	SET_BIT(PORTC,5); //H-A3
 110:	85 b3       	in	r24, 0x15	; 21
 112:	80 62       	ori	r24, 0x20	; 32
 114:	85 bb       	out	0x15, r24	; 21
	CLEAR_BIT(PORTC,6); //H-A4
 116:	85 b3       	in	r24, 0x15	; 21
 118:	8f 7b       	andi	r24, 0xBF	; 191
 11a:	85 bb       	out	0x15, r24	; 21
	//enable Ports
	CLEAR_BIT(PORTB,5);
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	8f 7d       	andi	r24, 0xDF	; 223
 120:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,6);
 122:	88 b3       	in	r24, 0x18	; 24
 124:	80 64       	ori	r24, 0x40	; 64
 126:	88 bb       	out	0x18, r24	; 24
 128:	08 95       	ret

0000012a <DC_MOTOR_backward>:
	
}
void DC_MOTOR_backward(){
	//motor A
	CLEAR_BIT(PORTC,3); //H-A1
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	87 7f       	andi	r24, 0xF7	; 247
 12e:	85 bb       	out	0x15, r24	; 21
	SET_BIT(PORTC,4); //H-A2
 130:	85 b3       	in	r24, 0x15	; 21
 132:	80 61       	ori	r24, 0x10	; 16
 134:	85 bb       	out	0x15, r24	; 21
	//motor B
	CLEAR_BIT(PORTC,5); //H-A3
 136:	85 b3       	in	r24, 0x15	; 21
 138:	8f 7d       	andi	r24, 0xDF	; 223
 13a:	85 bb       	out	0x15, r24	; 21
	SET_BIT(PORTC,6); //H-A4
 13c:	85 b3       	in	r24, 0x15	; 21
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	85 bb       	out	0x15, r24	; 21
	//enable Ports
	SET_BIT(PORTB,5);
 142:	88 b3       	in	r24, 0x18	; 24
 144:	80 62       	ori	r24, 0x20	; 32
 146:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,6);
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	88 bb       	out	0x18, r24	; 24
 14e:	08 95       	ret

00000150 <DC_MOTOR_stop>:
	
}
void DC_MOTOR_stop(){
	//motor A
	CLEAR_BIT(PORTC,3); //H-A1
 150:	85 b3       	in	r24, 0x15	; 21
 152:	87 7f       	andi	r24, 0xF7	; 247
 154:	85 bb       	out	0x15, r24	; 21
	CLEAR_BIT(PORTC,4); //H-A2
 156:	85 b3       	in	r24, 0x15	; 21
 158:	8f 7e       	andi	r24, 0xEF	; 239
 15a:	85 bb       	out	0x15, r24	; 21
	//motor B
	CLEAR_BIT(PORTC,5); //H-A3
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	8f 7d       	andi	r24, 0xDF	; 223
 160:	85 bb       	out	0x15, r24	; 21
	CLEAR_BIT(PORTC,6); //H-A4
 162:	85 b3       	in	r24, 0x15	; 21
 164:	8f 7b       	andi	r24, 0xBF	; 191
 166:	85 bb       	out	0x15, r24	; 21
	//enable Ports
	CLEAR_BIT(PORTB,5);
 168:	88 b3       	in	r24, 0x18	; 24
 16a:	8f 7d       	andi	r24, 0xDF	; 223
 16c:	88 bb       	out	0x18, r24	; 24
	CLEAR_BIT(PORTB,6);
 16e:	88 b3       	in	r24, 0x18	; 24
 170:	8f 7b       	andi	r24, 0xBF	; 191
 172:	88 bb       	out	0x18, r24	; 24
 174:	08 95       	ret

00000176 <lcd_send_command>:
 176:	98 2f       	mov	r25, r24
 178:	90 7f       	andi	r25, 0xF0	; 240
 17a:	9b bb       	out	0x1b, r25	; 27
 17c:	98 b3       	in	r25, 0x18	; 24
 17e:	9d 7f       	andi	r25, 0xFD	; 253
 180:	98 bb       	out	0x18, r25	; 24
 182:	98 b3       	in	r25, 0x18	; 24
 184:	98 60       	ori	r25, 0x08	; 8
 186:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	ef e1       	ldi	r30, 0x1F	; 31
 18a:	fe e4       	ldi	r31, 0x4E	; 78
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_send_command+0x16>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_send_command+0x1c>
 192:	00 00       	nop
 194:	98 b3       	in	r25, 0x18	; 24
 196:	97 7f       	andi	r25, 0xF7	; 247
 198:	98 bb       	out	0x18, r25	; 24
 19a:	ef e1       	ldi	r30, 0x1F	; 31
 19c:	fe e4       	ldi	r31, 0x4E	; 78
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_send_command+0x28>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_send_command+0x2e>
 1a4:	00 00       	nop
 1a6:	f0 e1       	ldi	r31, 0x10	; 16
 1a8:	8f 9f       	mul	r24, r31
 1aa:	c0 01       	movw	r24, r0
 1ac:	11 24       	eor	r1, r1
 1ae:	8b bb       	out	0x1b, r24	; 27
 1b0:	88 b3       	in	r24, 0x18	; 24
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	88 bb       	out	0x18, r24	; 24
 1b6:	8f e1       	ldi	r24, 0x1F	; 31
 1b8:	9e e4       	ldi	r25, 0x4E	; 78
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_send_command+0x44>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_send_command+0x4a>
 1c0:	00 00       	nop
 1c2:	88 b3       	in	r24, 0x18	; 24
 1c4:	87 7f       	andi	r24, 0xF7	; 247
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	ef e1       	ldi	r30, 0x1F	; 31
 1ca:	fe e4       	ldi	r31, 0x4E	; 78
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_send_command+0x56>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_send_command+0x5c>
 1d2:	00 00       	nop
 1d4:	08 95       	ret

000001d6 <lcd_init>:
 1d6:	80 ef       	ldi	r24, 0xF0	; 240
 1d8:	8a bb       	out	0x1a, r24	; 26
 1da:	87 b3       	in	r24, 0x17	; 23
 1dc:	8e 60       	ori	r24, 0x0E	; 14
 1de:	87 bb       	out	0x17, r24	; 23
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	8b bb       	out	0x1b, r24	; 27
 1e4:	88 b3       	in	r24, 0x18	; 24
 1e6:	88 60       	ori	r24, 0x08	; 8
 1e8:	88 bb       	out	0x18, r24	; 24
 1ea:	8f e1       	ldi	r24, 0x1F	; 31
 1ec:	9e e4       	ldi	r25, 0x4E	; 78
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_init+0x18>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_init+0x1e>
 1f4:	00 00       	nop
 1f6:	88 b3       	in	r24, 0x18	; 24
 1f8:	87 7f       	andi	r24, 0xF7	; 247
 1fa:	88 bb       	out	0x18, r24	; 24
 1fc:	8f e1       	ldi	r24, 0x1F	; 31
 1fe:	9e e4       	ldi	r25, 0x4E	; 78
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init+0x2a>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_init+0x30>
 206:	00 00       	nop
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_send_command>
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	9e e4       	ldi	r25, 0x4E	; 78
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd_init+0x3c>
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_init+0x42>
 218:	00 00       	nop
 21a:	8f e0       	ldi	r24, 0x0F	; 15
 21c:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_send_command>
 220:	8f e1       	ldi	r24, 0x1F	; 31
 222:	9e e4       	ldi	r25, 0x4E	; 78
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <lcd_init+0x4e>
 228:	00 c0       	rjmp	.+0      	; 0x22a <lcd_init+0x54>
 22a:	00 00       	nop
 22c:	80 e5       	ldi	r24, 0x50	; 80
 22e:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_send_command>
 232:	8f e1       	ldi	r24, 0x1F	; 31
 234:	9e e4       	ldi	r25, 0x4E	; 78
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <lcd_init+0x60>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <lcd_init+0x66>
 23c:	00 00       	nop
 23e:	08 95       	ret

00000240 <lcd_write_character>:
 240:	98 2f       	mov	r25, r24
 242:	90 7f       	andi	r25, 0xF0	; 240
 244:	9b bb       	out	0x1b, r25	; 27
 246:	98 b3       	in	r25, 0x18	; 24
 248:	92 60       	ori	r25, 0x02	; 2
 24a:	98 bb       	out	0x18, r25	; 24
 24c:	98 b3       	in	r25, 0x18	; 24
 24e:	98 60       	ori	r25, 0x08	; 8
 250:	98 bb       	out	0x18, r25	; 24
 252:	ef e1       	ldi	r30, 0x1F	; 31
 254:	fe e4       	ldi	r31, 0x4E	; 78
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_write_character+0x16>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_write_character+0x1c>
 25c:	00 00       	nop
 25e:	98 b3       	in	r25, 0x18	; 24
 260:	97 7f       	andi	r25, 0xF7	; 247
 262:	98 bb       	out	0x18, r25	; 24
 264:	ef e1       	ldi	r30, 0x1F	; 31
 266:	fe e4       	ldi	r31, 0x4E	; 78
 268:	31 97       	sbiw	r30, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_write_character+0x28>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_write_character+0x2e>
 26e:	00 00       	nop
 270:	f0 e1       	ldi	r31, 0x10	; 16
 272:	8f 9f       	mul	r24, r31
 274:	c0 01       	movw	r24, r0
 276:	11 24       	eor	r1, r1
 278:	8b bb       	out	0x1b, r24	; 27
 27a:	88 b3       	in	r24, 0x18	; 24
 27c:	88 60       	ori	r24, 0x08	; 8
 27e:	88 bb       	out	0x18, r24	; 24
 280:	8f e1       	ldi	r24, 0x1F	; 31
 282:	9e e4       	ldi	r25, 0x4E	; 78
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <lcd_write_character+0x44>
 288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_write_character+0x4a>
 28a:	00 00       	nop
 28c:	88 b3       	in	r24, 0x18	; 24
 28e:	87 7f       	andi	r24, 0xF7	; 247
 290:	88 bb       	out	0x18, r24	; 24
 292:	ef e1       	ldi	r30, 0x1F	; 31
 294:	fe e4       	ldi	r31, 0x4E	; 78
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <lcd_write_character+0x56>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <lcd_write_character+0x5c>
 29c:	00 00       	nop
 29e:	08 95       	ret

000002a0 <lcd_write_word>:
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	8c 01       	movw	r16, r24
 2aa:	c0 e0       	ldi	r28, 0x00	; 0
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
 2ae:	09 c0       	rjmp	.+18     	; 0x2c2 <lcd_write_word+0x22>
 2b0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_write_character>
 2b4:	21 96       	adiw	r28, 0x01	; 1
 2b6:	8f e1       	ldi	r24, 0x1F	; 31
 2b8:	9e e4       	ldi	r25, 0x4E	; 78
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_write_word+0x1a>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcd_write_word+0x20>
 2c0:	00 00       	nop
 2c2:	f8 01       	movw	r30, r16
 2c4:	ec 0f       	add	r30, r28
 2c6:	fd 1f       	adc	r31, r29
 2c8:	80 81       	ld	r24, Z
 2ca:	81 11       	cpse	r24, r1
 2cc:	f1 cf       	rjmp	.-30     	; 0x2b0 <lcd_write_word+0x10>
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	08 95       	ret

000002d8 <lcd_clear>:
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_send_command>
 2de:	8f e1       	ldi	r24, 0x1F	; 31
 2e0:	9e e4       	ldi	r25, 0x4E	; 78
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <lcd_clear+0xa>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <lcd_clear+0x10>
 2e8:	00 00       	nop
 2ea:	08 95       	ret

000002ec <lcd_goto_xy>:
 2ec:	20 e4       	ldi	r18, 0x40	; 64
 2ee:	82 9f       	mul	r24, r18
 2f0:	c0 01       	movw	r24, r0
 2f2:	11 24       	eor	r1, r1
 2f4:	80 68       	ori	r24, 0x80	; 128
 2f6:	86 0f       	add	r24, r22
 2f8:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fc:	8f ee       	ldi	r24, 0xEF	; 239
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <lcd_goto_xy+0x14>
 304:	00 c0       	rjmp	.+0      	; 0x306 <lcd_goto_xy+0x1a>
 306:	00 00       	nop
 308:	08 95       	ret

0000030a <Timer1_PWM_Servo_init>:
 30a:	8f b5       	in	r24, 0x2f	; 47
 30c:	82 6a       	ori	r24, 0xA2	; 162
 30e:	8f bd       	out	0x2f, r24	; 47
 310:	8e b5       	in	r24, 0x2e	; 46
 312:	8b 61       	ori	r24, 0x1B	; 27
 314:	8e bd       	out	0x2e, r24	; 46
 316:	87 e8       	ldi	r24, 0x87	; 135
 318:	93 e1       	ldi	r25, 0x13	; 19
 31a:	97 bd       	out	0x27, r25	; 39
 31c:	86 bd       	out	0x26, r24	; 38
 31e:	43 e0       	ldi	r20, 0x03	; 3
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_SetPinDir>
 328:	43 e0       	ldi	r20, 0x03	; 3
 32a:	65 e0       	ldi	r22, 0x05	; 5
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	0e 94 75 03 	call	0x6ea	; 0x6ea <DIO_SetPinDir>
 332:	08 95       	ret

00000334 <Servo_Motor_init>:
 334:	0e 94 85 01 	call	0x30a	; 0x30a <Timer1_PWM_Servo_init>
 338:	08 95       	ret

0000033a <serv_angle>:
 33a:	68 2f       	mov	r22, r24
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 8f 04 	call	0x91e	; 0x91e <__floatsisf>
 346:	25 e8       	ldi	r18, 0x85	; 133
 348:	3b ee       	ldi	r19, 0xEB	; 235
 34a:	41 e3       	ldi	r20, 0x31	; 49
 34c:	50 e4       	ldi	r21, 0x40	; 64
 34e:	0e 94 1b 05 	call	0xa36	; 0xa36 <__mulsf3>
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	4a ef       	ldi	r20, 0xFA	; 250
 358:	52 e4       	ldi	r21, 0x42	; 66
 35a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__addsf3>
 35e:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fixsfsi>
 362:	7b bd       	out	0x2b, r23	; 43
 364:	6a bd       	out	0x2a, r22	; 42
 366:	08 95       	ret

00000368 <enable_ex_interrupt>:
	return;
}

void enable_ex_interrupt(void){

	MCUCR |= (1<<ISC10);		// Trigger INT1 on any logic change.
 368:	85 b7       	in	r24, 0x35	; 53
 36a:	84 60       	ori	r24, 0x04	; 4
 36c:	85 bf       	out	0x35, r24	; 53
	GICR  |= (1<<INT1);			// Enable INT1 interrupts.
 36e:	8b b7       	in	r24, 0x3b	; 59
 370:	80 68       	ori	r24, 0x80	; 128
 372:	8b bf       	out	0x3b, r24	; 59
 374:	08 95       	ret

00000376 <ultrasonic_init>:
u8 distance_str[10];


void ultrasonic_init(void){

	TRIGGER_DDR|=(1<<TRIGGER);
 376:	81 b3       	in	r24, 0x11	; 17
 378:	81 60       	ori	r24, 0x01	; 1
 37a:	81 bb       	out	0x11, r24	; 17
	ECHO_DDR&=~(1<<ECHO);
 37c:	81 b3       	in	r24, 0x11	; 17
 37e:	87 7f       	andi	r24, 0xF7	; 247
 380:	81 bb       	out	0x11, r24	; 17
	ECHO_PULLUP|=(1<<ECHO);
 382:	82 b3       	in	r24, 0x12	; 18
 384:	88 60       	ori	r24, 0x08	; 8
 386:	82 bb       	out	0x12, r24	; 18
	enable_ex_interrupt();
 388:	0e 94 b4 01 	call	0x368	; 0x368 <enable_ex_interrupt>
	timer0_init();
 38c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <timer0_init>
 390:	08 95       	ret

00000392 <ultra_trigger>:

	return;
}

void ultra_trigger(void){
	if(!sensor_working){
 392:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <sensor_working>
 396:	81 11       	cpse	r24, r1
 398:	0c c0       	rjmp	.+24     	; 0x3b2 <ultra_trigger+0x20>
		TRIGGER_PORT|=(1<<TRIGGER);
 39a:	82 b3       	in	r24, 0x12	; 18
 39c:	81 60       	ori	r24, 0x01	; 1
 39e:	82 bb       	out	0x12, r24	; 18
 3a0:	80 e5       	ldi	r24, 0x50	; 80
 3a2:	8a 95       	dec	r24
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <ultra_trigger+0x10>
		_delay_us(15);
		TRIGGER_PORT&=~(1<<TRIGGER);
 3a6:	82 b3       	in	r24, 0x12	; 18
 3a8:	8e 7f       	andi	r24, 0xFE	; 254
 3aa:	82 bb       	out	0x12, r24	; 18
		sensor_working=1;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <sensor_working>
 3b2:	08 95       	ret

000003b4 <__vector_2>:
	}
}

ISR(INT1_vect){
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	4f 93       	push	r20
 3c4:	5f 93       	push	r21
 3c6:	6f 93       	push	r22
 3c8:	7f 93       	push	r23
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
	if(sensor_working==1){
 3d6:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <sensor_working>
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <__vector_2+0x2c>
 3de:	63 c0       	rjmp	.+198    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		if(rising_edge==0){
 3e0:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <rising_edge>
 3e4:	81 11       	cpse	r24, r1
 3e6:	0d c0       	rjmp	.+26     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			TCNT0=0x00;
 3e8:	12 be       	out	0x32, r1	; 50
			rising_edge=1;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <rising_edge>
			timer_counter=0;
 3f0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
 3f4:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x1>
 3f8:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__data_end+0x2>
 3fc:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__data_end+0x3>
 400:	52 c0       	rjmp	.+164    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		}
		else{
			distance=((timer_counter*256+TCNT0)/(466)/2);
 402:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 406:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
 40a:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <__data_end+0x2>
 40e:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <__data_end+0x3>
 412:	ba 2f       	mov	r27, r26
 414:	a9 2f       	mov	r26, r25
 416:	98 2f       	mov	r25, r24
 418:	88 27       	eor	r24, r24
 41a:	22 b7       	in	r18, 0x32	; 50
 41c:	bc 01       	movw	r22, r24
 41e:	cd 01       	movw	r24, r26
 420:	62 0f       	add	r22, r18
 422:	71 1d       	adc	r23, r1
 424:	81 1d       	adc	r24, r1
 426:	91 1d       	adc	r25, r1
 428:	24 ea       	ldi	r18, 0xA4	; 164
 42a:	33 e0       	ldi	r19, 0x03	; 3
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	0e 94 88 05 	call	0xb10	; 0xb10 <__udivmodsi4>
 434:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <distance>
 438:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <distance+0x1>
 43c:	40 93 a8 00 	sts	0x00A8, r20	; 0x8000a8 <distance+0x2>
 440:	50 93 a9 00 	sts	0x00A9, r21	; 0x8000a9 <distance+0x3>
			lcd_goto_xy(1,0);
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_goto_xy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 44c:	4a e0       	ldi	r20, 0x0A	; 10
 44e:	6a ea       	ldi	r22, 0xAA	; 170
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <distance>
 456:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <distance+0x1>
 45a:	0e 94 aa 05 	call	0xb54	; 0xb54 <__itoa_ncheck>
			itoa(distance,distance_str,10);// coverts the integer distance  into a character string.
			strcat(distance_str, " cm "); //appends the characters of the source string, up to and including the null character, to the end of the destination string
 45e:	aa ea       	ldi	r26, 0xAA	; 170
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	0d 90       	ld	r0, X+
 464:	00 20       	and	r0, r0
 466:	e9 f7       	brne	.-6      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 468:	11 97       	sbiw	r26, 0x01	; 1
 46a:	85 e0       	ldi	r24, 0x05	; 5
 46c:	e0 e6       	ldi	r30, 0x60	; 96
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	01 90       	ld	r0, Z+
 472:	0d 92       	st	X+, r0
 474:	8a 95       	dec	r24
 476:	e1 f7       	brne	.-8      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			lcd_write_word(distance_str);
 478:	8a ea       	ldi	r24, 0xAA	; 170
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_write_word>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 480:	2f ef       	ldi	r18, 0xFF	; 255
 482:	83 ef       	ldi	r24, 0xF3	; 243
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	21 50       	subi	r18, 0x01	; 1
 488:	80 40       	sbci	r24, 0x00	; 0
 48a:	90 40       	sbci	r25, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 490:	00 00       	nop
			_delay_ms(40);
			timer_counter=0;
 492:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
 496:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x1>
 49a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__data_end+0x2>
 49e:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__data_end+0x3>
			rising_edge=0;
 4a2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <rising_edge>
		}
	}}
 4a6:	ff 91       	pop	r31
 4a8:	ef 91       	pop	r30
 4aa:	bf 91       	pop	r27
 4ac:	af 91       	pop	r26
 4ae:	9f 91       	pop	r25
 4b0:	8f 91       	pop	r24
 4b2:	7f 91       	pop	r23
 4b4:	6f 91       	pop	r22
 4b6:	5f 91       	pop	r21
 4b8:	4f 91       	pop	r20
 4ba:	3f 91       	pop	r19
 4bc:	2f 91       	pop	r18
 4be:	0f 90       	pop	r0
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	0f 90       	pop	r0
 4c4:	1f 90       	pop	r1
 4c6:	18 95       	reti

000004c8 <__vector_11>:


	ISR(TIMER0_OVF_vect){   
 4c8:	1f 92       	push	r1
 4ca:	0f 92       	push	r0
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	0f 92       	push	r0
 4d0:	11 24       	eor	r1, r1
 4d2:	2f 93       	push	r18
 4d4:	8f 93       	push	r24
 4d6:	9f 93       	push	r25
 4d8:	af 93       	push	r26
 4da:	bf 93       	push	r27
		timer_counter++;
 4dc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 4e0:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
 4e4:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <__data_end+0x2>
 4e8:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <__data_end+0x3>
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	a1 1d       	adc	r26, r1
 4f0:	b1 1d       	adc	r27, r1
 4f2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
 4f6:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__data_end+0x1>
 4fa:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <__data_end+0x2>
 4fe:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <__data_end+0x3>
		if(timer_counter >NO_of_Counts){ 
 502:	8b 3d       	cpi	r24, 0xDB	; 219
 504:	92 40       	sbci	r25, 0x02	; 2
 506:	a1 05       	cpc	r26, r1
 508:	b1 05       	cpc	r27, r1
 50a:	68 f0       	brcs	.+26     	; 0x526 <__vector_11+0x5e>
			TCNT0=initial_start;
 50c:	12 be       	out	0x32, r1	; 50
			sensor_working=0;
 50e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <sensor_working>
			rising_edge=0;
 512:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <rising_edge>
			timer_counter=0;
 516:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
 51a:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x1>
 51e:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__data_end+0x2>
 522:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__data_end+0x3>
		}
	}
 526:	bf 91       	pop	r27
 528:	af 91       	pop	r26
 52a:	9f 91       	pop	r25
 52c:	8f 91       	pop	r24
 52e:	2f 91       	pop	r18
 530:	0f 90       	pop	r0
 532:	0f be       	out	0x3f, r0	; 63
 534:	0f 90       	pop	r0
 536:	1f 90       	pop	r1
 538:	18 95       	reti

0000053a <main>:

#define F_CPU 16000000UL
 extern u32 distance;
int main(){

	lcd_init();
 53a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_init>
	ultrasonic_init();
 53e:	0e 94 bb 01 	call	0x376	; 0x376 <ultrasonic_init>
	Servo_Motor_init();
 542:	0e 94 9a 01 	call	0x334	; 0x334 <Servo_Motor_init>
	DC_MOTOR_init(); 
 546:	0e 94 49 00 	call	0x92	; 0x92 <DC_MOTOR_init>
	
	sei();
 54a:	78 94       	sei

	lcd_write_word("Distance is");
 54c:	85 e6       	ldi	r24, 0x65	; 101
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_write_word>
 554:	8b e4       	ldi	r24, 0x4B	; 75
 556:	9d e1       	ldi	r25, 0x1D	; 29
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <main+0x1e>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <main+0x24>
 55e:	00 00       	nop
	_delay_ms(30); 


	
		
serv_angle(90); // straight position for the servo motor
 560:	8a e5       	ldi	r24, 0x5A	; 90
 562:	0e 94 9d 01 	call	0x33a	; 0x33a <serv_angle>
//DC_MOTOR_forward();

while(1)
{	
	serv_angle(90);//reset the position of the ultrasonic
 566:	8a e5       	ldi	r24, 0x5A	; 90
 568:	0e 94 9d 01 	call	0x33a	; 0x33a <serv_angle>
 56c:	9f eb       	ldi	r25, 0xBF	; 191
 56e:	2c e5       	ldi	r18, 0x5C	; 92
 570:	85 e1       	ldi	r24, 0x15	; 21
 572:	91 50       	subi	r25, 0x01	; 1
 574:	20 40       	sbci	r18, 0x00	; 0
 576:	80 40       	sbci	r24, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <main+0x38>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <main+0x42>
 57c:	00 00       	nop
	_delay_ms(7000);
	ultra_trigger(); //trigger the ultrasonic
 57e:	0e 94 c9 01 	call	0x392	; 0x392 <ultra_trigger>
 582:	9f e9       	ldi	r25, 0x9F	; 159
 584:	26 e8       	ldi	r18, 0x86	; 134
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	91 50       	subi	r25, 0x01	; 1
 58a:	20 40       	sbci	r18, 0x00	; 0
 58c:	80 40       	sbci	r24, 0x00	; 0
 58e:	e1 f7       	brne	.-8      	; 0x588 <main+0x4e>
 590:	00 c0       	rjmp	.+0      	; 0x592 <main+0x58>
 592:	00 00       	nop
	_delay_ms(500);
	lcd_goto_xy(0,1);
 594:	61 e0       	ldi	r22, 0x01	; 1
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_goto_xy>
 59c:	9f e9       	ldi	r25, 0x9F	; 159
 59e:	26 e8       	ldi	r18, 0x86	; 134
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	91 50       	subi	r25, 0x01	; 1
 5a4:	20 40       	sbci	r18, 0x00	; 0
 5a6:	80 40       	sbci	r24, 0x00	; 0
 5a8:	e1 f7       	brne	.-8      	; 0x5a2 <main+0x68>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <main+0x72>
 5ac:	00 00       	nop

		_delay_ms(500);
	if(distance<=30){ //NO forward path
 5ae:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <distance>
 5b2:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <distance+0x1>
 5b6:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <distance+0x2>
 5ba:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <distance+0x3>
 5be:	4f 97       	sbiw	r24, 0x1f	; 31
 5c0:	a1 05       	cpc	r26, r1
 5c2:	b1 05       	cpc	r27, r1
 5c4:	08 f0       	brcs	.+2      	; 0x5c8 <main+0x8e>
 5c6:	80 c0       	rjmp	.+256    	; 0x6c8 <main+0x18e>
		DC_MOTOR_stop();
 5c8:	0e 94 a8 00 	call	0x150	; 0x150 <DC_MOTOR_stop>
		serv_angle(15); //look right
 5cc:	8f e0       	ldi	r24, 0x0F	; 15
 5ce:	0e 94 9d 01 	call	0x33a	; 0x33a <serv_angle>
 5d2:	9f eb       	ldi	r25, 0xBF	; 191
 5d4:	2c e5       	ldi	r18, 0x5C	; 92
 5d6:	85 e1       	ldi	r24, 0x15	; 21
 5d8:	91 50       	subi	r25, 0x01	; 1
 5da:	20 40       	sbci	r18, 0x00	; 0
 5dc:	80 40       	sbci	r24, 0x00	; 0
 5de:	e1 f7       	brne	.-8      	; 0x5d8 <main+0x9e>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <main+0xa8>
 5e2:	00 00       	nop
		_delay_ms(7000);
		ultra_trigger(); //check right
 5e4:	0e 94 c9 01 	call	0x392	; 0x392 <ultra_trigger>
 5e8:	9f e9       	ldi	r25, 0x9F	; 159
 5ea:	26 e8       	ldi	r18, 0x86	; 134
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	91 50       	subi	r25, 0x01	; 1
 5f0:	20 40       	sbci	r18, 0x00	; 0
 5f2:	80 40       	sbci	r24, 0x00	; 0
 5f4:	e1 f7       	brne	.-8      	; 0x5ee <main+0xb4>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <main+0xbe>
 5f8:	00 00       	nop
		_delay_ms(500);
		if(distance<=30){ // NO RIGHT path
 5fa:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <distance>
 5fe:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <distance+0x1>
 602:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <distance+0x2>
 606:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <distance+0x3>
 60a:	4f 97       	sbiw	r24, 0x1f	; 31
 60c:	a1 05       	cpc	r26, r1
 60e:	b1 05       	cpc	r27, r1
 610:	08 f0       	brcs	.+2      	; 0x614 <main+0xda>
 612:	49 c0       	rjmp	.+146    	; 0x6a6 <main+0x16c>
			DC_MOTOR_stop();
 614:	0e 94 a8 00 	call	0x150	; 0x150 <DC_MOTOR_stop>
			serv_angle(180);//look left
 618:	84 eb       	ldi	r24, 0xB4	; 180
 61a:	0e 94 9d 01 	call	0x33a	; 0x33a <serv_angle>
 61e:	9f eb       	ldi	r25, 0xBF	; 191
 620:	2c e5       	ldi	r18, 0x5C	; 92
 622:	85 e1       	ldi	r24, 0x15	; 21
 624:	91 50       	subi	r25, 0x01	; 1
 626:	20 40       	sbci	r18, 0x00	; 0
 628:	80 40       	sbci	r24, 0x00	; 0
 62a:	e1 f7       	brne	.-8      	; 0x624 <main+0xea>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <main+0xf4>
 62e:	00 00       	nop
			_delay_ms(7000);
			ultra_trigger(); //check left
 630:	0e 94 c9 01 	call	0x392	; 0x392 <ultra_trigger>
 634:	9f e9       	ldi	r25, 0x9F	; 159
 636:	26 e8       	ldi	r18, 0x86	; 134
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	91 50       	subi	r25, 0x01	; 1
 63c:	20 40       	sbci	r18, 0x00	; 0
 63e:	80 40       	sbci	r24, 0x00	; 0
 640:	e1 f7       	brne	.-8      	; 0x63a <main+0x100>
 642:	00 c0       	rjmp	.+0      	; 0x644 <main+0x10a>
 644:	00 00       	nop
			_delay_ms(500);
			if(distance<=30){ //if all(forward,right,left)fails move backwards
 646:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <distance>
 64a:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <distance+0x1>
 64e:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <distance+0x2>
 652:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <distance+0x3>
 656:	4f 97       	sbiw	r24, 0x1f	; 31
 658:	a1 05       	cpc	r26, r1
 65a:	b1 05       	cpc	r27, r1
 65c:	98 f4       	brcc	.+38     	; 0x684 <main+0x14a>
				DC_MOTOR_backward(); // move BACKWARD
 65e:	0e 94 95 00 	call	0x12a	; 0x12a <DC_MOTOR_backward>
				lcd_clear();
 662:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_clear>
				lcd_goto_xy(0,1);
 666:	61 e0       	ldi	r22, 0x01	; 1
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_goto_xy>
				lcd_write_word("Move back");
 66e:	81 e7       	ldi	r24, 0x71	; 113
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_write_word>
 676:	8b e4       	ldi	r24, 0x4B	; 75
 678:	9d e1       	ldi	r25, 0x1D	; 29
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	f1 f7       	brne	.-4      	; 0x67a <main+0x140>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <main+0x146>
 680:	00 00       	nop
 682:	71 cf       	rjmp	.-286    	; 0x566 <main+0x2c>
				_delay_ms(30);
				
			}
			else{
				DC_MOTOR_left();  //Move LEFT
 684:	0e 94 82 00 	call	0x104	; 0x104 <DC_MOTOR_left>
				lcd_goto_xy(0,1);
 688:	61 e0       	ldi	r22, 0x01	; 1
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_goto_xy>
				lcd_write_word("Move left");
 690:	8b e7       	ldi	r24, 0x7B	; 123
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_write_word>
 698:	8b e4       	ldi	r24, 0x4B	; 75
 69a:	9d e1       	ldi	r25, 0x1D	; 29
 69c:	01 97       	sbiw	r24, 0x01	; 1
 69e:	f1 f7       	brne	.-4      	; 0x69c <main+0x162>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <main+0x168>
 6a2:	00 00       	nop
 6a4:	60 cf       	rjmp	.-320    	; 0x566 <main+0x2c>
				_delay_ms(30);
			}
		}
		else{
			DC_MOTOR_right();  //move Right
 6a6:	0e 94 6f 00 	call	0xde	; 0xde <DC_MOTOR_right>
			lcd_goto_xy(0,0);
 6aa:	60 e0       	ldi	r22, 0x00	; 0
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_goto_xy>
			lcd_write_word("Move right");
 6b2:	85 e8       	ldi	r24, 0x85	; 133
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_write_word>
 6ba:	8b e4       	ldi	r24, 0x4B	; 75
 6bc:	9d e1       	ldi	r25, 0x1D	; 29
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <main+0x184>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <main+0x18a>
 6c4:	00 00       	nop
 6c6:	4f cf       	rjmp	.-354    	; 0x566 <main+0x2c>
		
	}
	else { 
		//if succeed all checks
		
		DC_MOTOR_forward(); //Move Forward
 6c8:	0e 94 5c 00 	call	0xb8	; 0xb8 <DC_MOTOR_forward>
		lcd_goto_xy(0,0);
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_goto_xy>
 6d4:	8b e4       	ldi	r24, 0x4B	; 75
 6d6:	9d e1       	ldi	r25, 0x1D	; 29
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <main+0x19e>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <main+0x1a4>
 6de:	00 00       	nop
		_delay_ms(30);
		lcd_write_word(" Move forward ");
 6e0:	80 e9       	ldi	r24, 0x90	; 144
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_write_word>
 6e8:	3e cf       	rjmp	.-388    	; 0x566 <main+0x2c>

000006ea <DIO_SetPinDir>:
 6ea:	81 30       	cpi	r24, 0x01	; 1
 6ec:	01 f1       	breq	.+64     	; 0x72e <DIO_SetPinDir+0x44>
 6ee:	30 f0       	brcs	.+12     	; 0x6fc <DIO_SetPinDir+0x12>
 6f0:	82 30       	cpi	r24, 0x02	; 2
 6f2:	b1 f1       	breq	.+108    	; 0x760 <DIO_SetPinDir+0x76>
 6f4:	83 30       	cpi	r24, 0x03	; 3
 6f6:	09 f4       	brne	.+2      	; 0x6fa <DIO_SetPinDir+0x10>
 6f8:	4c c0       	rjmp	.+152    	; 0x792 <DIO_SetPinDir+0xa8>
 6fa:	08 95       	ret
 6fc:	43 30       	cpi	r20, 0x03	; 3
 6fe:	59 f4       	brne	.+22     	; 0x716 <DIO_SetPinDir+0x2c>
 700:	2a b3       	in	r18, 0x1a	; 26
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <DIO_SetPinDir+0x22>
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	6a 95       	dec	r22
 70e:	e2 f7       	brpl	.-8      	; 0x708 <DIO_SetPinDir+0x1e>
 710:	82 2b       	or	r24, r18
 712:	8a bb       	out	0x1a, r24	; 26
 714:	08 95       	ret
 716:	2a b3       	in	r18, 0x1a	; 26
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_SetPinDir+0x38>
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	6a 95       	dec	r22
 724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_SetPinDir+0x34>
 726:	80 95       	com	r24
 728:	82 23       	and	r24, r18
 72a:	8a bb       	out	0x1a, r24	; 26
 72c:	08 95       	ret
 72e:	43 30       	cpi	r20, 0x03	; 3
 730:	59 f4       	brne	.+22     	; 0x748 <DIO_SetPinDir+0x5e>
 732:	27 b3       	in	r18, 0x17	; 23
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_SetPinDir+0x54>
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	6a 95       	dec	r22
 740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_SetPinDir+0x50>
 742:	82 2b       	or	r24, r18
 744:	87 bb       	out	0x17, r24	; 23
 746:	08 95       	ret
 748:	27 b3       	in	r18, 0x17	; 23
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <DIO_SetPinDir+0x6a>
 750:	88 0f       	add	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	6a 95       	dec	r22
 756:	e2 f7       	brpl	.-8      	; 0x750 <DIO_SetPinDir+0x66>
 758:	80 95       	com	r24
 75a:	82 23       	and	r24, r18
 75c:	87 bb       	out	0x17, r24	; 23
 75e:	08 95       	ret
 760:	43 30       	cpi	r20, 0x03	; 3
 762:	59 f4       	brne	.+22     	; 0x77a <DIO_SetPinDir+0x90>
 764:	24 b3       	in	r18, 0x14	; 20
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_SetPinDir+0x86>
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	6a 95       	dec	r22
 772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_SetPinDir+0x82>
 774:	82 2b       	or	r24, r18
 776:	84 bb       	out	0x14, r24	; 20
 778:	08 95       	ret
 77a:	24 b3       	in	r18, 0x14	; 20
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_SetPinDir+0x9c>
 782:	88 0f       	add	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	6a 95       	dec	r22
 788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_SetPinDir+0x98>
 78a:	80 95       	com	r24
 78c:	82 23       	and	r24, r18
 78e:	84 bb       	out	0x14, r24	; 20
 790:	08 95       	ret
 792:	43 30       	cpi	r20, 0x03	; 3
 794:	59 f4       	brne	.+22     	; 0x7ac <DIO_SetPinDir+0xc2>
 796:	21 b3       	in	r18, 0x11	; 17
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DIO_SetPinDir+0xb8>
 79e:	88 0f       	add	r24, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	6a 95       	dec	r22
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <DIO_SetPinDir+0xb4>
 7a6:	82 2b       	or	r24, r18
 7a8:	81 bb       	out	0x11, r24	; 17
 7aa:	08 95       	ret
 7ac:	21 b3       	in	r18, 0x11	; 17
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_SetPinDir+0xce>
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	6a 95       	dec	r22
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_SetPinDir+0xca>
 7bc:	80 95       	com	r24
 7be:	82 23       	and	r24, r18
 7c0:	81 bb       	out	0x11, r24	; 17
 7c2:	08 95       	ret

000007c4 <timer0_init>:
 7c4:	13 be       	out	0x33, r1	; 51
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	83 bf       	out	0x33, r24	; 51
 7ca:	12 be       	out	0x32, r1	; 50
 7cc:	89 b7       	in	r24, 0x39	; 57
 7ce:	81 60       	ori	r24, 0x01	; 1
 7d0:	89 bf       	out	0x39, r24	; 57
 7d2:	08 95       	ret

000007d4 <__subsf3>:
 7d4:	50 58       	subi	r21, 0x80	; 128

000007d6 <__addsf3>:
 7d6:	bb 27       	eor	r27, r27
 7d8:	aa 27       	eor	r26, r26
 7da:	0e 94 02 04 	call	0x804	; 0x804 <__addsf3x>
 7de:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__fp_round>
 7e2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__fp_pscA>
 7e6:	38 f0       	brcs	.+14     	; 0x7f6 <__addsf3+0x20>
 7e8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__fp_pscB>
 7ec:	20 f0       	brcs	.+8      	; 0x7f6 <__addsf3+0x20>
 7ee:	39 f4       	brne	.+14     	; 0x7fe <__addsf3+0x28>
 7f0:	9f 3f       	cpi	r25, 0xFF	; 255
 7f2:	19 f4       	brne	.+6      	; 0x7fa <__addsf3+0x24>
 7f4:	26 f4       	brtc	.+8      	; 0x7fe <__addsf3+0x28>
 7f6:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__fp_nan>
 7fa:	0e f4       	brtc	.+2      	; 0x7fe <__addsf3+0x28>
 7fc:	e0 95       	com	r30
 7fe:	e7 fb       	bst	r30, 7
 800:	0c 94 ca 04 	jmp	0x994	; 0x994 <__fp_inf>

00000804 <__addsf3x>:
 804:	e9 2f       	mov	r30, r25
 806:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_split3>
 80a:	58 f3       	brcs	.-42     	; 0x7e2 <__addsf3+0xc>
 80c:	ba 17       	cp	r27, r26
 80e:	62 07       	cpc	r22, r18
 810:	73 07       	cpc	r23, r19
 812:	84 07       	cpc	r24, r20
 814:	95 07       	cpc	r25, r21
 816:	20 f0       	brcs	.+8      	; 0x820 <__addsf3x+0x1c>
 818:	79 f4       	brne	.+30     	; 0x838 <__addsf3x+0x34>
 81a:	a6 f5       	brtc	.+104    	; 0x884 <__stack+0x25>
 81c:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_zero>
 820:	0e f4       	brtc	.+2      	; 0x824 <__addsf3x+0x20>
 822:	e0 95       	com	r30
 824:	0b 2e       	mov	r0, r27
 826:	ba 2f       	mov	r27, r26
 828:	a0 2d       	mov	r26, r0
 82a:	0b 01       	movw	r0, r22
 82c:	b9 01       	movw	r22, r18
 82e:	90 01       	movw	r18, r0
 830:	0c 01       	movw	r0, r24
 832:	ca 01       	movw	r24, r20
 834:	a0 01       	movw	r20, r0
 836:	11 24       	eor	r1, r1
 838:	ff 27       	eor	r31, r31
 83a:	59 1b       	sub	r21, r25
 83c:	99 f0       	breq	.+38     	; 0x864 <__stack+0x5>
 83e:	59 3f       	cpi	r21, 0xF9	; 249
 840:	50 f4       	brcc	.+20     	; 0x856 <__addsf3x+0x52>
 842:	50 3e       	cpi	r21, 0xE0	; 224
 844:	68 f1       	brcs	.+90     	; 0x8a0 <__stack+0x41>
 846:	1a 16       	cp	r1, r26
 848:	f0 40       	sbci	r31, 0x00	; 0
 84a:	a2 2f       	mov	r26, r18
 84c:	23 2f       	mov	r18, r19
 84e:	34 2f       	mov	r19, r20
 850:	44 27       	eor	r20, r20
 852:	58 5f       	subi	r21, 0xF8	; 248
 854:	f3 cf       	rjmp	.-26     	; 0x83c <__addsf3x+0x38>
 856:	46 95       	lsr	r20
 858:	37 95       	ror	r19
 85a:	27 95       	ror	r18
 85c:	a7 95       	ror	r26
 85e:	f0 40       	sbci	r31, 0x00	; 0
 860:	53 95       	inc	r21
 862:	c9 f7       	brne	.-14     	; 0x856 <__addsf3x+0x52>
 864:	7e f4       	brtc	.+30     	; 0x884 <__stack+0x25>
 866:	1f 16       	cp	r1, r31
 868:	ba 0b       	sbc	r27, r26
 86a:	62 0b       	sbc	r22, r18
 86c:	73 0b       	sbc	r23, r19
 86e:	84 0b       	sbc	r24, r20
 870:	ba f0       	brmi	.+46     	; 0x8a0 <__stack+0x41>
 872:	91 50       	subi	r25, 0x01	; 1
 874:	a1 f0       	breq	.+40     	; 0x89e <__stack+0x3f>
 876:	ff 0f       	add	r31, r31
 878:	bb 1f       	adc	r27, r27
 87a:	66 1f       	adc	r22, r22
 87c:	77 1f       	adc	r23, r23
 87e:	88 1f       	adc	r24, r24
 880:	c2 f7       	brpl	.-16     	; 0x872 <__stack+0x13>
 882:	0e c0       	rjmp	.+28     	; 0x8a0 <__stack+0x41>
 884:	ba 0f       	add	r27, r26
 886:	62 1f       	adc	r22, r18
 888:	73 1f       	adc	r23, r19
 88a:	84 1f       	adc	r24, r20
 88c:	48 f4       	brcc	.+18     	; 0x8a0 <__stack+0x41>
 88e:	87 95       	ror	r24
 890:	77 95       	ror	r23
 892:	67 95       	ror	r22
 894:	b7 95       	ror	r27
 896:	f7 95       	ror	r31
 898:	9e 3f       	cpi	r25, 0xFE	; 254
 89a:	08 f0       	brcs	.+2      	; 0x89e <__stack+0x3f>
 89c:	b0 cf       	rjmp	.-160    	; 0x7fe <__addsf3+0x28>
 89e:	93 95       	inc	r25
 8a0:	88 0f       	add	r24, r24
 8a2:	08 f0       	brcs	.+2      	; 0x8a6 <__stack+0x47>
 8a4:	99 27       	eor	r25, r25
 8a6:	ee 0f       	add	r30, r30
 8a8:	97 95       	ror	r25
 8aa:	87 95       	ror	r24
 8ac:	08 95       	ret

000008ae <__fixsfsi>:
 8ae:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fixunssfsi>
 8b2:	68 94       	set
 8b4:	b1 11       	cpse	r27, r1
 8b6:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_szero>
 8ba:	08 95       	ret

000008bc <__fixunssfsi>:
 8bc:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__fp_splitA>
 8c0:	88 f0       	brcs	.+34     	; 0x8e4 <__fixunssfsi+0x28>
 8c2:	9f 57       	subi	r25, 0x7F	; 127
 8c4:	98 f0       	brcs	.+38     	; 0x8ec <__fixunssfsi+0x30>
 8c6:	b9 2f       	mov	r27, r25
 8c8:	99 27       	eor	r25, r25
 8ca:	b7 51       	subi	r27, 0x17	; 23
 8cc:	b0 f0       	brcs	.+44     	; 0x8fa <__fixunssfsi+0x3e>
 8ce:	e1 f0       	breq	.+56     	; 0x908 <__fixunssfsi+0x4c>
 8d0:	66 0f       	add	r22, r22
 8d2:	77 1f       	adc	r23, r23
 8d4:	88 1f       	adc	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	1a f0       	brmi	.+6      	; 0x8e0 <__fixunssfsi+0x24>
 8da:	ba 95       	dec	r27
 8dc:	c9 f7       	brne	.-14     	; 0x8d0 <__fixunssfsi+0x14>
 8de:	14 c0       	rjmp	.+40     	; 0x908 <__fixunssfsi+0x4c>
 8e0:	b1 30       	cpi	r27, 0x01	; 1
 8e2:	91 f0       	breq	.+36     	; 0x908 <__fixunssfsi+0x4c>
 8e4:	0e 94 14 05 	call	0xa28	; 0xa28 <__fp_zero>
 8e8:	b1 e0       	ldi	r27, 0x01	; 1
 8ea:	08 95       	ret
 8ec:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_zero>
 8f0:	67 2f       	mov	r22, r23
 8f2:	78 2f       	mov	r23, r24
 8f4:	88 27       	eor	r24, r24
 8f6:	b8 5f       	subi	r27, 0xF8	; 248
 8f8:	39 f0       	breq	.+14     	; 0x908 <__fixunssfsi+0x4c>
 8fa:	b9 3f       	cpi	r27, 0xF9	; 249
 8fc:	cc f3       	brlt	.-14     	; 0x8f0 <__fixunssfsi+0x34>
 8fe:	86 95       	lsr	r24
 900:	77 95       	ror	r23
 902:	67 95       	ror	r22
 904:	b3 95       	inc	r27
 906:	d9 f7       	brne	.-10     	; 0x8fe <__fixunssfsi+0x42>
 908:	3e f4       	brtc	.+14     	; 0x918 <__fixunssfsi+0x5c>
 90a:	90 95       	com	r25
 90c:	80 95       	com	r24
 90e:	70 95       	com	r23
 910:	61 95       	neg	r22
 912:	7f 4f       	sbci	r23, 0xFF	; 255
 914:	8f 4f       	sbci	r24, 0xFF	; 255
 916:	9f 4f       	sbci	r25, 0xFF	; 255
 918:	08 95       	ret

0000091a <__floatunsisf>:
 91a:	e8 94       	clt
 91c:	09 c0       	rjmp	.+18     	; 0x930 <__floatsisf+0x12>

0000091e <__floatsisf>:
 91e:	97 fb       	bst	r25, 7
 920:	3e f4       	brtc	.+14     	; 0x930 <__floatsisf+0x12>
 922:	90 95       	com	r25
 924:	80 95       	com	r24
 926:	70 95       	com	r23
 928:	61 95       	neg	r22
 92a:	7f 4f       	sbci	r23, 0xFF	; 255
 92c:	8f 4f       	sbci	r24, 0xFF	; 255
 92e:	9f 4f       	sbci	r25, 0xFF	; 255
 930:	99 23       	and	r25, r25
 932:	a9 f0       	breq	.+42     	; 0x95e <__floatsisf+0x40>
 934:	f9 2f       	mov	r31, r25
 936:	96 e9       	ldi	r25, 0x96	; 150
 938:	bb 27       	eor	r27, r27
 93a:	93 95       	inc	r25
 93c:	f6 95       	lsr	r31
 93e:	87 95       	ror	r24
 940:	77 95       	ror	r23
 942:	67 95       	ror	r22
 944:	b7 95       	ror	r27
 946:	f1 11       	cpse	r31, r1
 948:	f8 cf       	rjmp	.-16     	; 0x93a <__floatsisf+0x1c>
 94a:	fa f4       	brpl	.+62     	; 0x98a <__floatsisf+0x6c>
 94c:	bb 0f       	add	r27, r27
 94e:	11 f4       	brne	.+4      	; 0x954 <__floatsisf+0x36>
 950:	60 ff       	sbrs	r22, 0
 952:	1b c0       	rjmp	.+54     	; 0x98a <__floatsisf+0x6c>
 954:	6f 5f       	subi	r22, 0xFF	; 255
 956:	7f 4f       	sbci	r23, 0xFF	; 255
 958:	8f 4f       	sbci	r24, 0xFF	; 255
 95a:	9f 4f       	sbci	r25, 0xFF	; 255
 95c:	16 c0       	rjmp	.+44     	; 0x98a <__floatsisf+0x6c>
 95e:	88 23       	and	r24, r24
 960:	11 f0       	breq	.+4      	; 0x966 <__floatsisf+0x48>
 962:	96 e9       	ldi	r25, 0x96	; 150
 964:	11 c0       	rjmp	.+34     	; 0x988 <__floatsisf+0x6a>
 966:	77 23       	and	r23, r23
 968:	21 f0       	breq	.+8      	; 0x972 <__floatsisf+0x54>
 96a:	9e e8       	ldi	r25, 0x8E	; 142
 96c:	87 2f       	mov	r24, r23
 96e:	76 2f       	mov	r23, r22
 970:	05 c0       	rjmp	.+10     	; 0x97c <__floatsisf+0x5e>
 972:	66 23       	and	r22, r22
 974:	71 f0       	breq	.+28     	; 0x992 <__floatsisf+0x74>
 976:	96 e8       	ldi	r25, 0x86	; 134
 978:	86 2f       	mov	r24, r22
 97a:	70 e0       	ldi	r23, 0x00	; 0
 97c:	60 e0       	ldi	r22, 0x00	; 0
 97e:	2a f0       	brmi	.+10     	; 0x98a <__floatsisf+0x6c>
 980:	9a 95       	dec	r25
 982:	66 0f       	add	r22, r22
 984:	77 1f       	adc	r23, r23
 986:	88 1f       	adc	r24, r24
 988:	da f7       	brpl	.-10     	; 0x980 <__floatsisf+0x62>
 98a:	88 0f       	add	r24, r24
 98c:	96 95       	lsr	r25
 98e:	87 95       	ror	r24
 990:	97 f9       	bld	r25, 7
 992:	08 95       	ret

00000994 <__fp_inf>:
 994:	97 f9       	bld	r25, 7
 996:	9f 67       	ori	r25, 0x7F	; 127
 998:	80 e8       	ldi	r24, 0x80	; 128
 99a:	70 e0       	ldi	r23, 0x00	; 0
 99c:	60 e0       	ldi	r22, 0x00	; 0
 99e:	08 95       	ret

000009a0 <__fp_nan>:
 9a0:	9f ef       	ldi	r25, 0xFF	; 255
 9a2:	80 ec       	ldi	r24, 0xC0	; 192
 9a4:	08 95       	ret

000009a6 <__fp_pscA>:
 9a6:	00 24       	eor	r0, r0
 9a8:	0a 94       	dec	r0
 9aa:	16 16       	cp	r1, r22
 9ac:	17 06       	cpc	r1, r23
 9ae:	18 06       	cpc	r1, r24
 9b0:	09 06       	cpc	r0, r25
 9b2:	08 95       	ret

000009b4 <__fp_pscB>:
 9b4:	00 24       	eor	r0, r0
 9b6:	0a 94       	dec	r0
 9b8:	12 16       	cp	r1, r18
 9ba:	13 06       	cpc	r1, r19
 9bc:	14 06       	cpc	r1, r20
 9be:	05 06       	cpc	r0, r21
 9c0:	08 95       	ret

000009c2 <__fp_round>:
 9c2:	09 2e       	mov	r0, r25
 9c4:	03 94       	inc	r0
 9c6:	00 0c       	add	r0, r0
 9c8:	11 f4       	brne	.+4      	; 0x9ce <__fp_round+0xc>
 9ca:	88 23       	and	r24, r24
 9cc:	52 f0       	brmi	.+20     	; 0x9e2 <__fp_round+0x20>
 9ce:	bb 0f       	add	r27, r27
 9d0:	40 f4       	brcc	.+16     	; 0x9e2 <__fp_round+0x20>
 9d2:	bf 2b       	or	r27, r31
 9d4:	11 f4       	brne	.+4      	; 0x9da <__fp_round+0x18>
 9d6:	60 ff       	sbrs	r22, 0
 9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <__fp_round+0x20>
 9da:	6f 5f       	subi	r22, 0xFF	; 255
 9dc:	7f 4f       	sbci	r23, 0xFF	; 255
 9de:	8f 4f       	sbci	r24, 0xFF	; 255
 9e0:	9f 4f       	sbci	r25, 0xFF	; 255
 9e2:	08 95       	ret

000009e4 <__fp_split3>:
 9e4:	57 fd       	sbrc	r21, 7
 9e6:	90 58       	subi	r25, 0x80	; 128
 9e8:	44 0f       	add	r20, r20
 9ea:	55 1f       	adc	r21, r21
 9ec:	59 f0       	breq	.+22     	; 0xa04 <__fp_splitA+0x10>
 9ee:	5f 3f       	cpi	r21, 0xFF	; 255
 9f0:	71 f0       	breq	.+28     	; 0xa0e <__fp_splitA+0x1a>
 9f2:	47 95       	ror	r20

000009f4 <__fp_splitA>:
 9f4:	88 0f       	add	r24, r24
 9f6:	97 fb       	bst	r25, 7
 9f8:	99 1f       	adc	r25, r25
 9fa:	61 f0       	breq	.+24     	; 0xa14 <__fp_splitA+0x20>
 9fc:	9f 3f       	cpi	r25, 0xFF	; 255
 9fe:	79 f0       	breq	.+30     	; 0xa1e <__fp_splitA+0x2a>
 a00:	87 95       	ror	r24
 a02:	08 95       	ret
 a04:	12 16       	cp	r1, r18
 a06:	13 06       	cpc	r1, r19
 a08:	14 06       	cpc	r1, r20
 a0a:	55 1f       	adc	r21, r21
 a0c:	f2 cf       	rjmp	.-28     	; 0x9f2 <__fp_split3+0xe>
 a0e:	46 95       	lsr	r20
 a10:	f1 df       	rcall	.-30     	; 0x9f4 <__fp_splitA>
 a12:	08 c0       	rjmp	.+16     	; 0xa24 <__fp_splitA+0x30>
 a14:	16 16       	cp	r1, r22
 a16:	17 06       	cpc	r1, r23
 a18:	18 06       	cpc	r1, r24
 a1a:	99 1f       	adc	r25, r25
 a1c:	f1 cf       	rjmp	.-30     	; 0xa00 <__fp_splitA+0xc>
 a1e:	86 95       	lsr	r24
 a20:	71 05       	cpc	r23, r1
 a22:	61 05       	cpc	r22, r1
 a24:	08 94       	sec
 a26:	08 95       	ret

00000a28 <__fp_zero>:
 a28:	e8 94       	clt

00000a2a <__fp_szero>:
 a2a:	bb 27       	eor	r27, r27
 a2c:	66 27       	eor	r22, r22
 a2e:	77 27       	eor	r23, r23
 a30:	cb 01       	movw	r24, r22
 a32:	97 f9       	bld	r25, 7
 a34:	08 95       	ret

00000a36 <__mulsf3>:
 a36:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__mulsf3x>
 a3a:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__fp_round>
 a3e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__fp_pscA>
 a42:	38 f0       	brcs	.+14     	; 0xa52 <__mulsf3+0x1c>
 a44:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__fp_pscB>
 a48:	20 f0       	brcs	.+8      	; 0xa52 <__mulsf3+0x1c>
 a4a:	95 23       	and	r25, r21
 a4c:	11 f0       	breq	.+4      	; 0xa52 <__mulsf3+0x1c>
 a4e:	0c 94 ca 04 	jmp	0x994	; 0x994 <__fp_inf>
 a52:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__fp_nan>
 a56:	11 24       	eor	r1, r1
 a58:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_szero>

00000a5c <__mulsf3x>:
 a5c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_split3>
 a60:	70 f3       	brcs	.-36     	; 0xa3e <__mulsf3+0x8>

00000a62 <__mulsf3_pse>:
 a62:	95 9f       	mul	r25, r21
 a64:	c1 f3       	breq	.-16     	; 0xa56 <__mulsf3+0x20>
 a66:	95 0f       	add	r25, r21
 a68:	50 e0       	ldi	r21, 0x00	; 0
 a6a:	55 1f       	adc	r21, r21
 a6c:	62 9f       	mul	r22, r18
 a6e:	f0 01       	movw	r30, r0
 a70:	72 9f       	mul	r23, r18
 a72:	bb 27       	eor	r27, r27
 a74:	f0 0d       	add	r31, r0
 a76:	b1 1d       	adc	r27, r1
 a78:	63 9f       	mul	r22, r19
 a7a:	aa 27       	eor	r26, r26
 a7c:	f0 0d       	add	r31, r0
 a7e:	b1 1d       	adc	r27, r1
 a80:	aa 1f       	adc	r26, r26
 a82:	64 9f       	mul	r22, r20
 a84:	66 27       	eor	r22, r22
 a86:	b0 0d       	add	r27, r0
 a88:	a1 1d       	adc	r26, r1
 a8a:	66 1f       	adc	r22, r22
 a8c:	82 9f       	mul	r24, r18
 a8e:	22 27       	eor	r18, r18
 a90:	b0 0d       	add	r27, r0
 a92:	a1 1d       	adc	r26, r1
 a94:	62 1f       	adc	r22, r18
 a96:	73 9f       	mul	r23, r19
 a98:	b0 0d       	add	r27, r0
 a9a:	a1 1d       	adc	r26, r1
 a9c:	62 1f       	adc	r22, r18
 a9e:	83 9f       	mul	r24, r19
 aa0:	a0 0d       	add	r26, r0
 aa2:	61 1d       	adc	r22, r1
 aa4:	22 1f       	adc	r18, r18
 aa6:	74 9f       	mul	r23, r20
 aa8:	33 27       	eor	r19, r19
 aaa:	a0 0d       	add	r26, r0
 aac:	61 1d       	adc	r22, r1
 aae:	23 1f       	adc	r18, r19
 ab0:	84 9f       	mul	r24, r20
 ab2:	60 0d       	add	r22, r0
 ab4:	21 1d       	adc	r18, r1
 ab6:	82 2f       	mov	r24, r18
 ab8:	76 2f       	mov	r23, r22
 aba:	6a 2f       	mov	r22, r26
 abc:	11 24       	eor	r1, r1
 abe:	9f 57       	subi	r25, 0x7F	; 127
 ac0:	50 40       	sbci	r21, 0x00	; 0
 ac2:	9a f0       	brmi	.+38     	; 0xaea <__mulsf3_pse+0x88>
 ac4:	f1 f0       	breq	.+60     	; 0xb02 <__mulsf3_pse+0xa0>
 ac6:	88 23       	and	r24, r24
 ac8:	4a f0       	brmi	.+18     	; 0xadc <__mulsf3_pse+0x7a>
 aca:	ee 0f       	add	r30, r30
 acc:	ff 1f       	adc	r31, r31
 ace:	bb 1f       	adc	r27, r27
 ad0:	66 1f       	adc	r22, r22
 ad2:	77 1f       	adc	r23, r23
 ad4:	88 1f       	adc	r24, r24
 ad6:	91 50       	subi	r25, 0x01	; 1
 ad8:	50 40       	sbci	r21, 0x00	; 0
 ada:	a9 f7       	brne	.-22     	; 0xac6 <__mulsf3_pse+0x64>
 adc:	9e 3f       	cpi	r25, 0xFE	; 254
 ade:	51 05       	cpc	r21, r1
 ae0:	80 f0       	brcs	.+32     	; 0xb02 <__mulsf3_pse+0xa0>
 ae2:	0c 94 ca 04 	jmp	0x994	; 0x994 <__fp_inf>
 ae6:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_szero>
 aea:	5f 3f       	cpi	r21, 0xFF	; 255
 aec:	e4 f3       	brlt	.-8      	; 0xae6 <__mulsf3_pse+0x84>
 aee:	98 3e       	cpi	r25, 0xE8	; 232
 af0:	d4 f3       	brlt	.-12     	; 0xae6 <__mulsf3_pse+0x84>
 af2:	86 95       	lsr	r24
 af4:	77 95       	ror	r23
 af6:	67 95       	ror	r22
 af8:	b7 95       	ror	r27
 afa:	f7 95       	ror	r31
 afc:	e7 95       	ror	r30
 afe:	9f 5f       	subi	r25, 0xFF	; 255
 b00:	c1 f7       	brne	.-16     	; 0xaf2 <__mulsf3_pse+0x90>
 b02:	fe 2b       	or	r31, r30
 b04:	88 0f       	add	r24, r24
 b06:	91 1d       	adc	r25, r1
 b08:	96 95       	lsr	r25
 b0a:	87 95       	ror	r24
 b0c:	97 f9       	bld	r25, 7
 b0e:	08 95       	ret

00000b10 <__udivmodsi4>:
 b10:	a1 e2       	ldi	r26, 0x21	; 33
 b12:	1a 2e       	mov	r1, r26
 b14:	aa 1b       	sub	r26, r26
 b16:	bb 1b       	sub	r27, r27
 b18:	fd 01       	movw	r30, r26
 b1a:	0d c0       	rjmp	.+26     	; 0xb36 <__udivmodsi4_ep>

00000b1c <__udivmodsi4_loop>:
 b1c:	aa 1f       	adc	r26, r26
 b1e:	bb 1f       	adc	r27, r27
 b20:	ee 1f       	adc	r30, r30
 b22:	ff 1f       	adc	r31, r31
 b24:	a2 17       	cp	r26, r18
 b26:	b3 07       	cpc	r27, r19
 b28:	e4 07       	cpc	r30, r20
 b2a:	f5 07       	cpc	r31, r21
 b2c:	20 f0       	brcs	.+8      	; 0xb36 <__udivmodsi4_ep>
 b2e:	a2 1b       	sub	r26, r18
 b30:	b3 0b       	sbc	r27, r19
 b32:	e4 0b       	sbc	r30, r20
 b34:	f5 0b       	sbc	r31, r21

00000b36 <__udivmodsi4_ep>:
 b36:	66 1f       	adc	r22, r22
 b38:	77 1f       	adc	r23, r23
 b3a:	88 1f       	adc	r24, r24
 b3c:	99 1f       	adc	r25, r25
 b3e:	1a 94       	dec	r1
 b40:	69 f7       	brne	.-38     	; 0xb1c <__udivmodsi4_loop>
 b42:	60 95       	com	r22
 b44:	70 95       	com	r23
 b46:	80 95       	com	r24
 b48:	90 95       	com	r25
 b4a:	9b 01       	movw	r18, r22
 b4c:	ac 01       	movw	r20, r24
 b4e:	bd 01       	movw	r22, r26
 b50:	cf 01       	movw	r24, r30
 b52:	08 95       	ret

00000b54 <__itoa_ncheck>:
 b54:	bb 27       	eor	r27, r27
 b56:	4a 30       	cpi	r20, 0x0A	; 10
 b58:	31 f4       	brne	.+12     	; 0xb66 <__itoa_ncheck+0x12>
 b5a:	99 23       	and	r25, r25
 b5c:	22 f4       	brpl	.+8      	; 0xb66 <__itoa_ncheck+0x12>
 b5e:	bd e2       	ldi	r27, 0x2D	; 45
 b60:	90 95       	com	r25
 b62:	81 95       	neg	r24
 b64:	9f 4f       	sbci	r25, 0xFF	; 255
 b66:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__utoa_common>

00000b6a <__utoa_ncheck>:
 b6a:	bb 27       	eor	r27, r27

00000b6c <__utoa_common>:
 b6c:	fb 01       	movw	r30, r22
 b6e:	55 27       	eor	r21, r21
 b70:	aa 27       	eor	r26, r26
 b72:	88 0f       	add	r24, r24
 b74:	99 1f       	adc	r25, r25
 b76:	aa 1f       	adc	r26, r26
 b78:	a4 17       	cp	r26, r20
 b7a:	10 f0       	brcs	.+4      	; 0xb80 <__utoa_common+0x14>
 b7c:	a4 1b       	sub	r26, r20
 b7e:	83 95       	inc	r24
 b80:	50 51       	subi	r21, 0x10	; 16
 b82:	b9 f7       	brne	.-18     	; 0xb72 <__utoa_common+0x6>
 b84:	a0 5d       	subi	r26, 0xD0	; 208
 b86:	aa 33       	cpi	r26, 0x3A	; 58
 b88:	08 f0       	brcs	.+2      	; 0xb8c <__utoa_common+0x20>
 b8a:	a9 5d       	subi	r26, 0xD9	; 217
 b8c:	a1 93       	st	Z+, r26
 b8e:	00 97       	sbiw	r24, 0x00	; 0
 b90:	79 f7       	brne	.-34     	; 0xb70 <__utoa_common+0x4>
 b92:	b1 11       	cpse	r27, r1
 b94:	b1 93       	st	Z+, r27
 b96:	11 92       	st	Z+, r1
 b98:	cb 01       	movw	r24, r22
 b9a:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <strrev>

00000b9e <strrev>:
 b9e:	dc 01       	movw	r26, r24
 ba0:	fc 01       	movw	r30, r24
 ba2:	67 2f       	mov	r22, r23
 ba4:	71 91       	ld	r23, Z+
 ba6:	77 23       	and	r23, r23
 ba8:	e1 f7       	brne	.-8      	; 0xba2 <strrev+0x4>
 baa:	32 97       	sbiw	r30, 0x02	; 2
 bac:	04 c0       	rjmp	.+8      	; 0xbb6 <strrev+0x18>
 bae:	7c 91       	ld	r23, X
 bb0:	6d 93       	st	X+, r22
 bb2:	70 83       	st	Z, r23
 bb4:	62 91       	ld	r22, -Z
 bb6:	ae 17       	cp	r26, r30
 bb8:	bf 07       	cpc	r27, r31
 bba:	c8 f3       	brcs	.-14     	; 0xbae <strrev+0x10>
 bbc:	08 95       	ret

00000bbe <_exit>:
 bbe:	f8 94       	cli

00000bc0 <__stop_program>:
 bc0:	ff cf       	rjmp	.-2      	; 0xbc0 <__stop_program>
